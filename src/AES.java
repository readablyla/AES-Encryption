/**
 * AES.java - COMP3260 Assignment 2
 * Date: 15/05/2019
 * @author Brenden Mayall c3236213
 * @author Leala Darby c3279478
 *
 * Contains methods and lookup tables required for AES encryption and decryption implementation,
 * of types AES0, AES1, AES2, AES3, AES4.
 */

public class AES{
	//S-box matrix used for the substitute bytes and key expansion steps
	private static final int[][] sBox = {{0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76},
										{0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0}, 
										{0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15}, 
										{0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75}, 
										{0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84}, 
										{0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf}, 
										{0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8}, 
										{0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2}, 
										{0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73}, 
										{0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb}, 
										{0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79}, 
										{0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08}, 
										{0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a}, 
										{0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e}, 
										{0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf}, 
										{0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16}};

	//Inverse S-box matrix used for inverse substitute bytes
	private static final int[][] inverseSBox =  {{0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb},
												{0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb},
												{0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e},
												{0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25},
												{0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92},
												{0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84},
												{0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06},
												{0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b},
												{0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73},
												{0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e},
												{0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b},
												{0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4},
												{0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f},
												{0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef},
												{0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61},
												{0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d}};

	// Key Expansion array
	private static final int[] roundConstant = {0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36};

	//Lookup tables for mixColumns
	private static final int[] multiply2 = {0x00,0x02,0x04,0x06,0x08,0x0a,0x0c,0x0e,0x10,0x12,0x14,0x16,0x18,0x1a,0x1c,0x1e,
											0x20,0x22,0x24,0x26,0x28,0x2a,0x2c,0x2e,0x30,0x32,0x34,0x36,0x38,0x3a,0x3c,0x3e,
											0x40,0x42,0x44,0x46,0x48,0x4a,0x4c,0x4e,0x50,0x52,0x54,0x56,0x58,0x5a,0x5c,0x5e,
											0x60,0x62,0x64,0x66,0x68,0x6a,0x6c,0x6e,0x70,0x72,0x74,0x76,0x78,0x7a,0x7c,0x7e,
											0x80,0x82,0x84,0x86,0x88,0x8a,0x8c,0x8e,0x90,0x92,0x94,0x96,0x98,0x9a,0x9c,0x9e,
											0xa0,0xa2,0xa4,0xa6,0xa8,0xaa,0xac,0xae,0xb0,0xb2,0xb4,0xb6,0xb8,0xba,0xbc,0xbe,
											0xc0,0xc2,0xc4,0xc6,0xc8,0xca,0xcc,0xce,0xd0,0xd2,0xd4,0xd6,0xd8,0xda,0xdc,0xde,
											0xe0,0xe2,0xe4,0xe6,0xe8,0xea,0xec,0xee,0xf0,0xf2,0xf4,0xf6,0xf8,0xfa,0xfc,0xfe,
											0x1b,0x19,0x1f,0x1d,0x13,0x11,0x17,0x15,0x0b,0x09,0x0f,0x0d,0x03,0x01,0x07,0x05,
											0x3b,0x39,0x3f,0x3d,0x33,0x31,0x37,0x35,0x2b,0x29,0x2f,0x2d,0x23,0x21,0x27,0x25,
											0x5b,0x59,0x5f,0x5d,0x53,0x51,0x57,0x55,0x4b,0x49,0x4f,0x4d,0x43,0x41,0x47,0x45,
											0x7b,0x79,0x7f,0x7d,0x73,0x71,0x77,0x75,0x6b,0x69,0x6f,0x6d,0x63,0x61,0x67,0x65,
											0x9b,0x99,0x9f,0x9d,0x93,0x91,0x97,0x95,0x8b,0x89,0x8f,0x8d,0x83,0x81,0x87,0x85,
											0xbb,0xb9,0xbf,0xbd,0xb3,0xb1,0xb7,0xb5,0xab,0xa9,0xaf,0xad,0xa3,0xa1,0xa7,0xa5,
											0xdb,0xd9,0xdf,0xdd,0xd3,0xd1,0xd7,0xd5,0xcb,0xc9,0xcf,0xcd,0xc3,0xc1,0xc7,0xc5,
											0xfb,0xf9,0xff,0xfd,0xf3,0xf1,0xf7,0xf5,0xeb,0xe9,0xef,0xed,0xe3,0xe1,0xe7,0xe5};
	private static final int[] multiply3 = {0x00,0x03,0x06,0x05,0x0c,0x0f,0x0a,0x09,0x18,0x1b,0x1e,0x1d,0x14,0x17,0x12,0x11,
											0x30,0x33,0x36,0x35,0x3c,0x3f,0x3a,0x39,0x28,0x2b,0x2e,0x2d,0x24,0x27,0x22,0x21,
											0x60,0x63,0x66,0x65,0x6c,0x6f,0x6a,0x69,0x78,0x7b,0x7e,0x7d,0x74,0x77,0x72,0x71,
											0x50,0x53,0x56,0x55,0x5c,0x5f,0x5a,0x59,0x48,0x4b,0x4e,0x4d,0x44,0x47,0x42,0x41,
											0xc0,0xc3,0xc6,0xc5,0xcc,0xcf,0xca,0xc9,0xd8,0xdb,0xde,0xdd,0xd4,0xd7,0xd2,0xd1,
											0xf0,0xf3,0xf6,0xf5,0xfc,0xff,0xfa,0xf9,0xe8,0xeb,0xee,0xed,0xe4,0xe7,0xe2,0xe1,
											0xa0,0xa3,0xa6,0xa5,0xac,0xaf,0xaa,0xa9,0xb8,0xbb,0xbe,0xbd,0xb4,0xb7,0xb2,0xb1,
											0x90,0x93,0x96,0x95,0x9c,0x9f,0x9a,0x99,0x88,0x8b,0x8e,0x8d,0x84,0x87,0x82,0x81,
											0x9b,0x98,0x9d,0x9e,0x97,0x94,0x91,0x92,0x83,0x80,0x85,0x86,0x8f,0x8c,0x89,0x8a,
											0xab,0xa8,0xad,0xae,0xa7,0xa4,0xa1,0xa2,0xb3,0xb0,0xb5,0xb6,0xbf,0xbc,0xb9,0xba,
											0xfb,0xf8,0xfd,0xfe,0xf7,0xf4,0xf1,0xf2,0xe3,0xe0,0xe5,0xe6,0xef,0xec,0xe9,0xea,
											0xcb,0xc8,0xcd,0xce,0xc7,0xc4,0xc1,0xc2,0xd3,0xd0,0xd5,0xd6,0xdf,0xdc,0xd9,0xda,
											0x5b,0x58,0x5d,0x5e,0x57,0x54,0x51,0x52,0x43,0x40,0x45,0x46,0x4f,0x4c,0x49,0x4a,
											0x6b,0x68,0x6d,0x6e,0x67,0x64,0x61,0x62,0x73,0x70,0x75,0x76,0x7f,0x7c,0x79,0x7a,
											0x3b,0x38,0x3d,0x3e,0x37,0x34,0x31,0x32,0x23,0x20,0x25,0x26,0x2f,0x2c,0x29,0x2a,
											0x0b,0x08,0x0d,0x0e,0x07,0x04,0x01,0x02,0x13,0x10,0x15,0x16,0x1f,0x1c,0x19,0x1a};

	//Lookup tables for inverseMixColumns
	private static final int[] multiply9 = {0x00,0x09,0x12,0x1b,0x24,0x2d,0x36,0x3f,0x48,0x41,0x5a,0x53,0x6c,0x65,0x7e,0x77,
											0x90,0x99,0x82,0x8b,0xb4,0xbd,0xa6,0xaf,0xd8,0xd1,0xca,0xc3,0xfc,0xf5,0xee,0xe7,
											0x3b,0x32,0x29,0x20,0x1f,0x16,0x0d,0x04,0x73,0x7a,0x61,0x68,0x57,0x5e,0x45,0x4c,
											0xab,0xa2,0xb9,0xb0,0x8f,0x86,0x9d,0x94,0xe3,0xea,0xf1,0xf8,0xc7,0xce,0xd5,0xdc,
											0x76,0x7f,0x64,0x6d,0x52,0x5b,0x40,0x49,0x3e,0x37,0x2c,0x25,0x1a,0x13,0x08,0x01,
											0xe6,0xef,0xf4,0xfd,0xc2,0xcb,0xd0,0xd9,0xae,0xa7,0xbc,0xb5,0x8a,0x83,0x98,0x91,
											0x4d,0x44,0x5f,0x56,0x69,0x60,0x7b,0x72,0x05,0x0c,0x17,0x1e,0x21,0x28,0x33,0x3a,
											0xdd,0xd4,0xcf,0xc6,0xf9,0xf0,0xeb,0xe2,0x95,0x9c,0x87,0x8e,0xb1,0xb8,0xa3,0xaa,
											0xec,0xe5,0xfe,0xf7,0xc8,0xc1,0xda,0xd3,0xa4,0xad,0xb6,0xbf,0x80,0x89,0x92,0x9b,
											0x7c,0x75,0x6e,0x67,0x58,0x51,0x4a,0x43,0x34,0x3d,0x26,0x2f,0x10,0x19,0x02,0x0b,
											0xd7,0xde,0xc5,0xcc,0xf3,0xfa,0xe1,0xe8,0x9f,0x96,0x8d,0x84,0xbb,0xb2,0xa9,0xa0,
											0x47,0x4e,0x55,0x5c,0x63,0x6a,0x71,0x78,0x0f,0x06,0x1d,0x14,0x2b,0x22,0x39,0x30,
											0x9a,0x93,0x88,0x81,0xbe,0xb7,0xac,0xa5,0xd2,0xdb,0xc0,0xc9,0xf6,0xff,0xe4,0xed,
											0x0a,0x03,0x18,0x11,0x2e,0x27,0x3c,0x35,0x42,0x4b,0x50,0x59,0x66,0x6f,0x74,0x7d,
											0xa1,0xa8,0xb3,0xba,0x85,0x8c,0x97,0x9e,0xe9,0xe0,0xfb,0xf2,0xcd,0xc4,0xdf,0xd6,
											0x31,0x38,0x23,0x2a,0x15,0x1c,0x07,0x0e,0x79,0x70,0x6b,0x62,0x5d,0x54,0x4f,0x46};
	private static final int[] multiplyB = {0x00,0x0b,0x16,0x1d,0x2c,0x27,0x3a,0x31,0x58,0x53,0x4e,0x45,0x74,0x7f,0x62,0x69,
											0xb0,0xbb,0xa6,0xad,0x9c,0x97,0x8a,0x81,0xe8,0xe3,0xfe,0xf5,0xc4,0xcf,0xd2,0xd9,
											0x7b,0x70,0x6d,0x66,0x57,0x5c,0x41,0x4a,0x23,0x28,0x35,0x3e,0x0f,0x04,0x19,0x12,
											0xcb,0xc0,0xdd,0xd6,0xe7,0xec,0xf1,0xfa,0x93,0x98,0x85,0x8e,0xbf,0xb4,0xa9,0xa2,
											0xf6,0xfd,0xe0,0xeb,0xda,0xd1,0xcc,0xc7,0xae,0xa5,0xb8,0xb3,0x82,0x89,0x94,0x9f,
											0x46,0x4d,0x50,0x5b,0x6a,0x61,0x7c,0x77,0x1e,0x15,0x08,0x03,0x32,0x39,0x24,0x2f,
											0x8d,0x86,0x9b,0x90,0xa1,0xaa,0xb7,0xbc,0xd5,0xde,0xc3,0xc8,0xf9,0xf2,0xef,0xe4,
											0x3d,0x36,0x2b,0x20,0x11,0x1a,0x07,0x0c,0x65,0x6e,0x73,0x78,0x49,0x42,0x5f,0x54,
											0xf7,0xfc,0xe1,0xea,0xdb,0xd0,0xcd,0xc6,0xaf,0xa4,0xb9,0xb2,0x83,0x88,0x95,0x9e,
											0x47,0x4c,0x51,0x5a,0x6b,0x60,0x7d,0x76,0x1f,0x14,0x09,0x02,0x33,0x38,0x25,0x2e,
											0x8c,0x87,0x9a,0x91,0xa0,0xab,0xb6,0xbd,0xd4,0xdf,0xc2,0xc9,0xf8,0xf3,0xee,0xe5,
											0x3c,0x37,0x2a,0x21,0x10,0x1b,0x06,0x0d,0x64,0x6f,0x72,0x79,0x48,0x43,0x5e,0x55,
											0x01,0x0a,0x17,0x1c,0x2d,0x26,0x3b,0x30,0x59,0x52,0x4f,0x44,0x75,0x7e,0x63,0x68,
											0xb1,0xba,0xa7,0xac,0x9d,0x96,0x8b,0x80,0xe9,0xe2,0xff,0xf4,0xc5,0xce,0xd3,0xd8,
											0x7a,0x71,0x6c,0x67,0x56,0x5d,0x40,0x4b,0x22,0x29,0x34,0x3f,0x0e,0x05,0x18,0x13,
											0xca,0xc1,0xdc,0xd7,0xe6,0xed,0xf0,0xfb,0x92,0x99,0x84,0x8f,0xbe,0xb5,0xa8,0xa3};
	private static final int[] multiplyD = {0x00,0x0d,0x1a,0x17,0x34,0x39,0x2e,0x23,0x68,0x65,0x72,0x7f,0x5c,0x51,0x46,0x4b,
											0xd0,0xdd,0xca,0xc7,0xe4,0xe9,0xfe,0xf3,0xb8,0xb5,0xa2,0xaf,0x8c,0x81,0x96,0x9b,
											0xbb,0xb6,0xa1,0xac,0x8f,0x82,0x95,0x98,0xd3,0xde,0xc9,0xc4,0xe7,0xea,0xfd,0xf0,
											0x6b,0x66,0x71,0x7c,0x5f,0x52,0x45,0x48,0x03,0x0e,0x19,0x14,0x37,0x3a,0x2d,0x20,
											0x6d,0x60,0x77,0x7a,0x59,0x54,0x43,0x4e,0x05,0x08,0x1f,0x12,0x31,0x3c,0x2b,0x26,
											0xbd,0xb0,0xa7,0xaa,0x89,0x84,0x93,0x9e,0xd5,0xd8,0xcf,0xc2,0xe1,0xec,0xfb,0xf6,
											0xd6,0xdb,0xcc,0xc1,0xe2,0xef,0xf8,0xf5,0xbe,0xb3,0xa4,0xa9,0x8a,0x87,0x90,0x9d,
											0x06,0x0b,0x1c,0x11,0x32,0x3f,0x28,0x25,0x6e,0x63,0x74,0x79,0x5a,0x57,0x40,0x4d,
											0xda,0xd7,0xc0,0xcd,0xee,0xe3,0xf4,0xf9,0xb2,0xbf,0xa8,0xa5,0x86,0x8b,0x9c,0x91,
											0x0a,0x07,0x10,0x1d,0x3e,0x33,0x24,0x29,0x62,0x6f,0x78,0x75,0x56,0x5b,0x4c,0x41,
											0x61,0x6c,0x7b,0x76,0x55,0x58,0x4f,0x42,0x09,0x04,0x13,0x1e,0x3d,0x30,0x27,0x2a,
											0xb1,0xbc,0xab,0xa6,0x85,0x88,0x9f,0x92,0xd9,0xd4,0xc3,0xce,0xed,0xe0,0xf7,0xfa,
											0xb7,0xba,0xad,0xa0,0x83,0x8e,0x99,0x94,0xdf,0xd2,0xc5,0xc8,0xeb,0xe6,0xf1,0xfc,
											0x67,0x6a,0x7d,0x70,0x53,0x5e,0x49,0x44,0x0f,0x02,0x15,0x18,0x3b,0x36,0x21,0x2c,
											0x0c,0x01,0x16,0x1b,0x38,0x35,0x22,0x2f,0x64,0x69,0x7e,0x73,0x50,0x5d,0x4a,0x47,
											0xdc,0xd1,0xc6,0xcb,0xe8,0xe5,0xf2,0xff,0xb4,0xb9,0xae,0xa3,0x80,0x8d,0x9a,0x97};
	private static final int[] multiplyE = {0x00,0x0e,0x1c,0x12,0x38,0x36,0x24,0x2a,0x70,0x7e,0x6c,0x62,0x48,0x46,0x54,0x5a,
											0xe0,0xee,0xfc,0xf2,0xd8,0xd6,0xc4,0xca,0x90,0x9e,0x8c,0x82,0xa8,0xa6,0xb4,0xba,
											0xdb,0xd5,0xc7,0xc9,0xe3,0xed,0xff,0xf1,0xab,0xa5,0xb7,0xb9,0x93,0x9d,0x8f,0x81,
											0x3b,0x35,0x27,0x29,0x03,0x0d,0x1f,0x11,0x4b,0x45,0x57,0x59,0x73,0x7d,0x6f,0x61,
											0xad,0xa3,0xb1,0xbf,0x95,0x9b,0x89,0x87,0xdd,0xd3,0xc1,0xcf,0xe5,0xeb,0xf9,0xf7,
											0x4d,0x43,0x51,0x5f,0x75,0x7b,0x69,0x67,0x3d,0x33,0x21,0x2f,0x05,0x0b,0x19,0x17,
											0x76,0x78,0x6a,0x64,0x4e,0x40,0x52,0x5c,0x06,0x08,0x1a,0x14,0x3e,0x30,0x22,0x2c,
											0x96,0x98,0x8a,0x84,0xae,0xa0,0xb2,0xbc,0xe6,0xe8,0xfa,0xf4,0xde,0xd0,0xc2,0xcc,
											0x41,0x4f,0x5d,0x53,0x79,0x77,0x65,0x6b,0x31,0x3f,0x2d,0x23,0x09,0x07,0x15,0x1b,
											0xa1,0xaf,0xbd,0xb3,0x99,0x97,0x85,0x8b,0xd1,0xdf,0xcd,0xc3,0xe9,0xe7,0xf5,0xfb,
											0x9a,0x94,0x86,0x88,0xa2,0xac,0xbe,0xb0,0xea,0xe4,0xf6,0xf8,0xd2,0xdc,0xce,0xc0,
											0x7a,0x74,0x66,0x68,0x42,0x4c,0x5e,0x50,0x0a,0x04,0x16,0x18,0x32,0x3c,0x2e,0x20,
											0xec,0xe2,0xf0,0xfe,0xd4,0xda,0xc8,0xc6,0x9c,0x92,0x80,0x8e,0xa4,0xaa,0xb8,0xb6,
											0x0c,0x02,0x10,0x1e,0x34,0x3a,0x28,0x26,0x7c,0x72,0x60,0x6e,0x44,0x4a,0x58,0x56,
											0x37,0x39,0x2b,0x25,0x0f,0x01,0x13,0x1d,0x47,0x49,0x5b,0x55,0x7f,0x71,0x63,0x6d,
											0xd7,0xd9,0xcb,0xc5,0xef,0xe1,0xf3,0xfd,0xa7,0xa9,0xbb,0xb5,0x9f,0x91,0x83,0x8d};

	private int[][] expandedKey = new int[4][44];
	private int numberOfRounds = 9;
	//string array of the result after each round
	private String[] roundResult = new String [11];

	//parametrised constructor
	public AES(String firstLine, String inputKey, boolean e, int version){
		int[][] state = new int[4][4];
		int[][] key = new int[4][4];
		for (int i = 0; i < 4; i++){	//fill out the state column by column
			for (int j = 0; j < 4; j++){	//fill out the state row by row
				//puts firstLine into the state as a 4x4 matrix
				state[j][i] = Integer.parseInt(firstLine.substring((8 * j) + (32 * i), (8 * j) + (32 * i + 8)), 2);
				//puts inputKey into the key as a 4x4 matrix
				key[j][i] = Integer.parseInt(inputKey.substring((8 * j) + (32 * i), (8 * j) + (32 * i + 8)), 2);
			}
		}

		keyExpansionSchedule(key, expandedKey);
		if (version == 0) {
			roundResult[10] = matrixToString(AES0(state, e));
		}
		else if (version == 1) {
			roundResult[10] = matrixToString(AES1(state, e));
		}
		else if (version == 2) {
			roundResult[10] = matrixToString(AES2(state, e));
		}
		else if (version == 3) {
			roundResult[10] = matrixToString(AES3(state, e));
		}
		else if (version == 4) {
			roundResult[10] = matrixToString(AES4(state, e));
		}
	}

	/**
	 * The original AES version
	 * @param state plaintext or ciphertext as a 4x4 matrix
	 * @param e encryption/decryption flag. True for encryption
	 * @return encrypted plaintext or decrypted ciphertext
	 */
	private int[][] AES0(int[][] state, boolean e){
		roundResult[0] = matrixToString(state);
		if (e){
			//encrypt
			addRoundKey(state, setRoundKey(0));
			for (int i = 0; i < numberOfRounds; i++){
				substituteBytes(state);
				shiftRows(state);
				mixColumns(state);
				addRoundKey(state, setRoundKey(i+1));//round keys 1:9
				roundResult[i+1] = matrixToString(state);
			}
			substituteBytes(state);
			shiftRows(state);
			addRoundKey(state, setRoundKey(10));
		}
		else{
			//decrypt
			addRoundKey(state, setRoundKey(10));
			for (int i = numberOfRounds; i > 0 ; i--){
				inverseShiftRows(state);
				inverseSubstituteBytes(state);
				addRoundKey(state, setRoundKey(i));
				inverseMixColumns(state);
				roundResult[(numberOfRounds-i)+1] = matrixToString(state);
			}
			inverseShiftRows(state);
			inverseSubstituteBytes(state);
			addRoundKey(state, setRoundKey(0));
		}
		return state;
	}

	/**
	 * AES1 – SubstituteBytes is missing from all rounds
	 * @param state plaintext or ciphertext as a 4x4 matrix
	 * @param e encryption/decryption flag. True for encryption 
	 * @return encrypted plaintext or decrypted ciphertext
	 */
	private int[][] AES1(int[][] state, boolean e) {
		roundResult[0] = matrixToString(state);
		if (e){
			//encrypt
			addRoundKey(state, setRoundKey(0));
			for (int i = 0; i < numberOfRounds; i++){
				shiftRows(state);
				mixColumns(state);
				addRoundKey(state, setRoundKey(i+1));//round keys 1:9
				roundResult[i+1] = matrixToString(state);
			}
			shiftRows(state);
			addRoundKey(state, setRoundKey(10));
		}
		else{
			//decrypt
			addRoundKey(state, setRoundKey(10));
			for (int i = numberOfRounds; i > 0 ; i--){
				inverseShiftRows(state);
				addRoundKey(state, setRoundKey(i));
				inverseMixColumns(state);
				roundResult[(numberOfRounds-i)+1] = matrixToString(state);
			}
			inverseShiftRows(state);
			addRoundKey(state, setRoundKey(0));
		}
		return state;
	}

	/**
	 * AES2 – ShiftRows is missing from all rounds
	 * @param state plaintext or ciphertext as a 4x4 matrix
	 * @param e encryption/decryption flag. True for encryption
	 * @return encrypted plaintext or decrypted ciphertext
	 */
	private int[][] AES2(int[][] state, boolean e){
		roundResult[0] = matrixToString(state);
		if (e){
			//encrypt
			addRoundKey(state, setRoundKey(0));
			for (int i = 0; i < numberOfRounds; i++){
				substituteBytes(state);
				mixColumns(state);
				addRoundKey(state, setRoundKey(i+1));//round keys 1:9
				roundResult[i+1] = matrixToString(state);
			}
			substituteBytes(state);
			addRoundKey(state, setRoundKey(10));
		}
		else{
			//decrypt
			addRoundKey(state, setRoundKey(10));
			for (int i = numberOfRounds; i > 0 ; i--){
				inverseSubstituteBytes(state);
				addRoundKey(state, setRoundKey(i));
				inverseMixColumns(state);
				roundResult[(numberOfRounds-i)+1] = matrixToString(state);
			}
			inverseSubstituteBytes(state);
			addRoundKey(state, setRoundKey(0));
		}
		return state;
	}

	/**
	 * AES3 – MixColumns is missing from all rounds
	 * @param state plaintext or ciphertext as a 4x4 matrix
	 * @param e encryption/decryption flag. True for encryption 
	 * @return encrypted plaintext or decrypted ciphertext
	 */
	private int[][] AES3(int[][] state, boolean e){
		roundResult[0] = matrixToString(state);
		if (e){
			//encrypt
			addRoundKey(state, setRoundKey(0));
			for (int i = 0; i < numberOfRounds; i++){
				substituteBytes(state);
				shiftRows(state);
				addRoundKey(state, setRoundKey(i+1));//round keys 1:9
				roundResult[i+1] = matrixToString(state);
			}
			substituteBytes(state);
			shiftRows(state);
			addRoundKey(state, setRoundKey(10));
		}
		else{
			//decrypt
			addRoundKey(state, setRoundKey(10));
			for (int i = numberOfRounds; i > 0 ; i--){
				inverseShiftRows(state);
				inverseSubstituteBytes(state);
				addRoundKey(state, setRoundKey(i));
				roundResult[(numberOfRounds-i)+1] = matrixToString(state);
			}
			inverseShiftRows(state);
			inverseSubstituteBytes(state);
			addRoundKey(state, setRoundKey(0));
		}
		return state;
	}

	/**
	 * AES4 - AddRoundKey is missing from all rounds
	 * @param state plaintext or ciphertext as a 4x4 matrix
	 * @param e encryption/decryption flag. True for encryption 
	 * @return encrypted plaintext or decrypted ciphertext
	 */
	private int[][] AES4(int[][] state, boolean e){
		roundResult[0] = matrixToString(state);
		if (e){
			//encrypt
			addRoundKey(state, setRoundKey(0));
			for (int i = 0; i < numberOfRounds; i++){
				substituteBytes(state);
				shiftRows(state);
				mixColumns(state);
				roundResult[i+1] = matrixToString(state);
			}
			substituteBytes(state);
			shiftRows(state);
		}
		else{
			//decrypt
			addRoundKey(state, setRoundKey(10));
			for (int i = numberOfRounds; i > 0 ; i--){
				inverseShiftRows(state);
				inverseSubstituteBytes(state);
				inverseMixColumns(state);
				roundResult[(numberOfRounds-i)+1] = matrixToString(state);
			}
			inverseShiftRows(state);
			inverseSubstituteBytes(state);
		}
		return state;
	}

	/**
	 * Substitutes bytes in the passed state array with the bytes in the sBox array.
	 * Each byte in state is replaced by a byte in row (left nibble) and column (right nibble) of sBox.
	 * @param state array whose values will be replaced by values in sBox
	 */
	private void substituteBytes(int[][] state) {
		substituteBytesHelper(state, sBox);
	}

	/**
	 * Substitutes bytes in the passed state array with the bytes in the inverseSBox array.
	 * Each byte in state is replaced by byte in row (left nibble) and column (right nibble) of inverseSBox.
	 * @param state array whose values will be replaced by values in inverseSBox
	 */
	private void inverseSubstituteBytes(int[][] state){
		substituteBytesHelper(state, inverseSBox);
	}

	/**
	 * Performs the actual substitution for substituteBytes and inverseSubstituteBytes.
	 * @param state array whose values will be replaced by the lookup table
	 * @param sBox array used for lookup
	 */
	private void substituteBytesHelper(int[][] state, int[][] sBox){//sBox will be either sBox or inverseSBox, as required
		int val;
		for (int i = 0; i < 4; i++){//columns
			for (int j = 0; j < 4; j++){//rows
				val = state[j][i];
				state[j][i] = sBox[val / 16][val % 16];
			}
		}
	}

	/**
	 * Performs the shift rows step of the AES algorithm.
	 * @param array the array to perform shifts on
	 */
	private void shiftRows(int[][] array) {
		for (int i = 1; i < 4; i++) {
			array[i] = rotateLeft(array[i], i);
		}
	}

	/**
	 * Inverse of shiftRows for AES decryption.
	 * @param array the array to perform shifts on
	 */
	private void inverseShiftRows(int[][] array){
		for (int i = 1; i < 4; i++){
			array[i] = rotateRight(array[i], i);
		}
	}

	/**
	 * Performs a circular left shift to the given array the specified number of times.
	 * @param row the array to be rotated
	 * @param times number of times the array is to be rotated
	 * @return the rotated array 
	 */
	private int[] rotateLeft(int[] row, int times){
		while (times > 0){
			int temp = row[0];
			for (int i = 0; i < 3; i++){
				row[i] = row[i + 1];
			}
			row[3] = temp;
			times--;
		}
		return row;
	}

	/**
	 * Does a circular shift right to the given array the specified number of times.
	 * @param row the array to be rotated
	 * @param times number of times the array is rotated
	 * @return the rotated array 
	 */
	private int[] rotateRight(int[] row, int times){
		while (times > 0){
			int temp = row[3];
			for (int i = 3; i > 0; i--) {
				row[i] = row[i - 1];
			}
			row[0] = temp;
			times--;
		}
		return row;
	}

	/**
	 * Performs mix columns step by using lookup tables in Galois field multiplication (2^8) for 2 and 3 times.
	 * @param state array to be modified
	 */
	private void mixColumns(int[][] state){
		int[][] tempArray = new int[4][4];
		for (int i = 0; i < 4; i++){//for each column
			//perform required lookup multiplications corresponding to the Galois field matrix
			tempArray[0][i] = (multiply2[state[0][i]] ^ multiply3[state[1][i]] ^ state[2][i] ^ state[3][i]);
			tempArray[1][i] = (state[0][i] ^ multiply2[state[1][i]] ^ multiply3[state[2][i]] ^ state[3][i]);
			tempArray[2][i] = (state[0][i] ^ state[1][i] ^ multiply2[state[2][i]] ^ multiply3[state[3][i]]);
			tempArray[3][i] = (multiply3[state[0][i]] ^ state[1][i] ^ state[2][i] ^ multiply2[state[3][i]]);
		}
		copyMatrix(tempArray, state);
	}

	/**
	 * Performs inverse mix columns step by using lookup tables in Galois field multiplication (2^8) for 9, 11, 13 and 14 times.
	 * @param state array to be modified
	 */
	private void inverseMixColumns(int[][] state){
		int[][] tempArray = new int[4][4];
		for (int i = 0; i < 4; i++){//for each column
			//perform required lookup multiplications corresponding to the inverse Galois field matrix
			tempArray[0][i] = (multiplyE[state[0][i]] ^ multiplyB[state[1][i]] ^ multiplyD[state[2][i]] ^ multiply9[state[3][i]]);
			tempArray[1][i] = (multiply9[state[0][i]] ^ multiplyE[state[1][i]] ^ multiplyB[state[2][i]] ^ multiplyD[state[3][i]]);
			tempArray[2][i] = (multiplyD[state[0][i]] ^ multiply9[state[1][i]] ^ multiplyE[state[2][i]] ^ multiplyB[state[3][i]]);
			tempArray[3][i] = (multiplyB[state[0][i]] ^ multiplyD[state[1][i]] ^ multiply9[state[2][i]] ^ multiplyE[state[3][i]]);
		}
		copyMatrix(tempArray, state);
	}

	/**
	 * G function used in AES key expansion.
	 * @param temp word to apply g function to
	 * @param roundConstantValToXOR index of value from roundConstant array to XOR with temp
	 */ 
	private void gFunction(int[] temp, int roundConstantValToXOR){
		//Rotate left
		temp = rotateLeft(temp, 1);
		//S-box
		int hexaDec;
		for (int i = 0; i < 4; i++){
			hexaDec = temp[i];
			temp[i] = sBox[hexaDec / 16][hexaDec % 16];
		}
		//Round constant
		temp[0] ^= roundConstant[roundConstantValToXOR];
	}

	/**
	 * The key expansion algorithm that takes the key and produces all round keys.
	 * @param inputKey the key to preform the expansion on
	 * @param allExpandedKeys array that sotres the expanded key
	 */
	private void keyExpansionSchedule(int[][] inputKey, int[][] allExpandedKeys){
		//First copy the original key
		for (int i = 0; i < 4; i++){
			for (int j = 0; j < 4; j++){
				allExpandedKeys[i][j] = inputKey[i][j];
			}
		}

		int wordCount = 4;//current number of words (out of 44)
		int roundConstantValToXOR = 1;//the index of roundConstant to select for the XOR step
		int[] tempArray = new int[4];//temporary array to operate on

		while (wordCount < 44){
			for (int i = 0; i < 4; i++){
				tempArray[i] = allExpandedKeys[i][(wordCount)-1];// col index 3 then 4 then 5...
			}
			//Apply the g function to every 4th word
			if (wordCount % 4 == 0){
				gFunction(tempArray, roundConstantValToXOR);//modifies tempArray
				roundConstantValToXOR++;
			}
			//XOR tempArr with the 4th previous column
			for (int i = 0; i < 4; i++){
				allExpandedKeys[i][wordCount] = allExpandedKeys[i][(wordCount)-4] ^ tempArray[i];// col index 4 then 5 then 6...; col index 0 then 1 then 2...
			}
			wordCount++;
		}
	}


	/**
	 * Returns a 4x4 matrix containing the round key specified by the round value.
	 * @param round round number 
	 * @return 4x4 int matrix containing the round key
	 */
	private int[][] setRoundKey(int round){
		int[][] roundKey = new int[4][4];//the single key to be returned
		for (int i = 0; i < 4; i++){
			for (int j = round * 4; j < (round * 4) + 4; j++){
				roundKey[i][j % 4] = expandedKey[i][j];//sets the round key to the corresponding key stored in the expandedKey array
			}
		}
		return roundKey;
	}

	/**
	 * XOR's the state and roundKey matrices. Add round key step of Rijndael algorithm.
	 * @param state state matrix
	 * @param roundKey round key matrix
	 */
	private void addRoundKey(int[][] state, int[][] roundKey){
		for (int i = 0; i < 4; i++){//for each column
			for (int j = 0; j < 4; j++){//for each row
				state[j][i] ^= roundKey[j][i];//XOR the state and current round key
			}
		}
	}

	/**
	 * Helper method to copy 2d array.
	 * @param target matrix copied to
	 * @param original matrix to be copied
	 */ 
	private void copyMatrix(int[][] original, int[][] target){
		for (int i = 0; i < original.length; i++){//for each row
			for (int j = 0; j < original[0].length; j++){//for each column
				target[i][j] = original[i][j];//copy the value
			}
		}
	}

	/**
	 * Takes state as an int matrix and returns it as a formatted string.
	 * @param m matrix to be converted to string
	 * @return formatted string  
	 */
	private String matrixToString(int[][] m) {
	String result = "";
	for(int i = 0; i < m.length; i++) {
		for (int j = 0; j < m[0].length; j++) {
			result += String.format("%8s", Integer.toBinaryString(m[j][i])).replace(' ', '0');
		}
	}
	return result;
	}

	/**
	 * Getter for roundResult.
	 * @return array of strings containing results after each round
	 */
	public String[] getRoundResult() {
		return roundResult;
	}
}